{"version":3,"file":"static/js/82.198353b6.chunk.js","mappings":"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","sources":["views/diagnosis/Loading.js","views/diagnosis/Result.js","views/diagnosis/Diagnosis.js"],"sourcesContent":["import React from 'react'\nimport {\n  // CCard,\n  // CCardHeader,\n  // CCardBody,\n  // CButton,\n  // CRow,\n  // CCol,\n  CToast,\n  CToastBody,\n  // CToastClose,\n  CToastHeader,\n  CSpinner,\n  // CToaster,\n} from '@coreui/react'\nconst Loading = () => {\n  return (\n    <div>\n      <CToast title=\"Processing\" autohide={false} visible={true}>\n        <CToastHeader closeButton>\n          {/* <svg\n            className=\"rounded me-2\"\n            width=\"20\"\n            height=\"20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"xMidYMid slice\"\n            focusable=\"false\"\n            role=\"img\"\n          >\n            <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n          </svg> */}\n          <div style={{ margin: '5px' }}>\n            <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n          </div>\n\n          <strong className=\"me-auto\"> Processing</strong>\n          <small>now</small>\n        </CToastHeader>\n        <CToastBody>\n          Your image is being processed... <br />\n          No image uploaded to the server is stored.\n        </CToastBody>\n      </CToast>\n    </div>\n  )\n}\n\nexport default Loading\n","import { CChartDoughnut } from '@coreui/react-chartjs'\nimport {\n  CCard,\n  CCardHeader,\n  CCardImage,\n  CCardText,\n  CCardBody,\n  CCol,\n  CRow,\n  CCardTitle,\n} from '@coreui/react'\nimport React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nconst Result = (res) => {\n  // debugger\n  const [img, setImg] = useState()\n  const form = useSelector((state) => state.form)\n  console.log(form)\n  let reader = new FileReader()\n  reader.readAsDataURL(form.image[0])\n  reader.onload = (e) => {\n    setImg(e.target.result)\n    // console.log(e.target.result)\n  }\n\n  var data = {\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: ['#FF6â€°84', '#4BC0C0', '#FFCE56', '#36A2EB'],\n      },\n    ],\n  }\n  Object.keys(res.result).forEach((key) => {\n    data.labels.push(key)\n    data.datasets[0].data.push(res.result[key])\n  })\n  // debugger\n  const type = data.labels[data.datasets[0].data.indexOf(Math.max(...data.datasets[0].data))]\n  return (\n    <div>\n      <CCard>\n        <CCardHeader>\n          <strong> Results </strong>\n        </CCardHeader>\n        <CCardBody>\n          <CCardTitle>Congrats!</CCardTitle>\n          <p className=\"text-medium-emphasis small\">Your image is successfully identified!</p>\n          <CRow>\n            <CCol center md={4} sm={6} xs={10}>\n              <strong>Uploaded image</strong>\n              <hr />\n              <CCard align=\"center\" style={{ margin: '10px' }}>\n                <CCardImage orientation=\"bottom\" src={img} width=\"10wh\" />\n                <CCardBody>\n                  <CCardTitle align=\"left\">{form.name}</CCardTitle>\n                  <CCardText>\n                    <CRow>\n                      <CCol align=\"left\">type:</CCol>\n                      <CCol>\n                        <font color=\"36A2EB\">\n                          <strong>{type}</strong>\n                        </font>\n                      </CCol>\n                    </CRow>\n                    <CRow>\n                      <CCol align=\"left\">Private:</CCol>\n                      <CCol>\n                        <strong>{form.shareSwitch ? 'No' : 'Yes'}</strong>\n                      </CCol>\n                    </CRow>\n                  </CCardText>\n                </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol>\n              <div>\n                <strong>Result</strong>\n                <hr />\n                <CChartDoughnut style={{ width: '18rem' }} data={data} />\n              </div>\n            </CCol>\n          </CRow>\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nexport default Result\n","import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CFormSwitch,\n  // CSpinner,\n  CFormSelect,\n  CFormFeedback,\n  CRow,\n} from '@coreui/react'\nimport { useForm } from 'react-hook-form'\nimport axios from 'axios'\nimport Loading from './Loading'\nimport Result from './Result'\nimport { useDispatch } from 'react-redux'\n\nconst Diagnosis = () => {\n  const dispatch = useDispatch()\n  const { register, handleSubmit } = useForm()\n  const [loading, setLoading] = React.useState(false)\n  const [result, setResult] = React.useState(null)\n  const onSubmit = (data) => {\n    // store form data in redux store\n    dispatch({ type: 'set', form: data })\n    let formData = new FormData()\n    setLoading(true)\n    Object.keys(data).forEach((key) => {\n      if (key === 'image') {\n        formData.append(key, data[key][0])\n      } else {\n        formData.append(key, data[key])\n      }\n    })\n    axios\n      .post('/api/predict', formData, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n        },\n      })\n      .then((res) => {\n        // debugger\n        dispatch({\n          type: 'set',\n          result: res.data,\n        })\n        setResult(res.data)\n        console.log(res.data)\n      })\n  }\n\n  return (\n    <div>\n      {!loading && !result && (\n        <CRow>\n          <CCol xs={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>\n                <strong>Start Diagnosis</strong> <small>Upload photo to start diagnosis</small>\n              </CCardHeader>\n              <CCardBody>\n                <CForm onSubmit={handleSubmit(onSubmit)}>\n                  {/* <DocsExample href=\"forms/form-control#file-input\"> */}\n\n                  <CCol className=\"mb-3\" md={6}>\n                    <CFormLabel htmlFor=\"formName\">Name this diagnosis:</CFormLabel>\n                    <CInputGroup className=\"has-validation\">\n                      <CFormInput\n                        {...register('name')}\n                        type=\"text\"\n                        id=\"formName\"\n                        placeholder=\"Input Name\"\n                        required\n                      />\n                      <CFormFeedback invalid>Please choose a username.</CFormFeedback>\n                    </CInputGroup>\n                  </CCol>\n                  <CCol className=\"mb-3\" md={3}>\n                    <CFormLabel htmlFor=\"formType\" required>\n                      Select image type:\n                    </CFormLabel>\n                    <CFormSelect {...register('type')} aria-label=\"Select type:\" id=\"formType\">\n                      <option>Select type</option>\n                      <option value=\"jpeg\">jpeg</option>\n                      <option value=\"png\">png</option>\n                      <option value=\"tiff\">tiff</option>\n                    </CFormSelect>\n                    <CFormFeedback invalid>Please choose a username.</CFormFeedback>\n                  </CCol>\n\n                  <CCol className=\"mb-3\" md={6}>\n                    <CFormLabel htmlFor=\"formFile\">Upload image:</CFormLabel>\n                    <CFormInput {...register('image')} type=\"file\" id=\"formFile\" />\n                  </CCol>\n                  {/* <div className=\"mb-3\">\n                <CFormLabel htmlFor=\"formFileMultiple\">Multiple files input example</CFormLabel>\n                <CFormInput type=\"file\" id=\"formFileMultiple\" multiple />\n              </div> */}\n                  <CCol md={5}>\n                    <CFormSwitch\n                      {...register('shareSwitch')}\n                      label=\"Share Data with us\"\n                      id=\"formSwitch\"\n                    />\n                  </CCol>\n                  <CCol md={7}>\n                    <br />\n                    <CButton type=\"submit\" color=\"primary\" className=\"text-end\">\n                      Submit\n                    </CButton>\n                  </CCol>\n                </CForm>\n                {/* </DocsExample> */}\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      )}\n      {loading && !result && <Loading />}\n      {result && <Result result={result} />}\n    </div>\n  )\n}\n\nexport default Diagnosis\n"],"names":["title","autohide","visible","closeButton","style","margin","component","size","className","res","useState","img","setImg","form","useSelector","state","console","log","reader","FileReader","readAsDataURL","image","onload","e","target","result","data","labels","datasets","backgroundColor","Object","keys","forEach","key","push","type","indexOf","Math","max","center","md","sm","xs","align","orientation","src","width","name","color","shareSwitch","dispatch","useDispatch","useForm","register","handleSubmit","React","loading","setLoading","setResult","onSubmit","formData","FormData","append","axios","headers","then","htmlFor","id","placeholder","required","invalid","value","label"],"sourceRoot":""}