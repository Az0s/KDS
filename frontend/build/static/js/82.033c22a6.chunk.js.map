{"version":3,"file":"static/js/82.033c22a6.chunk.js","mappings":"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","sources":["views/diagnosis/Loading.js","views/diagnosis/Result.js","views/diagnosis/Diagnosis.js"],"sourcesContent":["import React from 'react'\nimport {\n  // CCard,\n  // CCardHeader,\n  // CCardBody,\n  // CButton,\n  // CRow,\n  // CCol,\n  CToast,\n  CToastBody,\n  // CToastClose,\n  CToastHeader,\n  CSpinner,\n  // CToaster,\n} from '@coreui/react'\nconst Loading = () => {\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}>\n      <CToast\n        title=\"Processing\"\n        autohide={false}\n        visible={true}\n        style={{ display: 'inline-block' }}\n      >\n        <CToastHeader closeButton>\n          {/* <svg\n            className=\"rounded me-2\"\n            width=\"20\"\n            height=\"20\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"xMidYMid slice\"\n            focusable=\"false\"\n            role=\"img\"\n          >\n            <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n          </svg> */}\n          <CSpinner style={{ margin: '5px' }} component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n\n          <strong className=\"me-auto\"> Processing</strong>\n          <small>now</small>\n        </CToastHeader>\n        <CToastBody>\n          Your image is being processed... <br />\n          No image uploaded to the server is stored.\n        </CToastBody>\n      </CToast>\n    </div>\n  )\n}\n\nexport default Loading\n","import { CChartDoughnut } from '@coreui/react-chartjs'\nimport { CCard, CCardHeader, CCardImage, CCardText, CCardBody, CCardTitle } from '@coreui/react'\nimport React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nconst Result = (res) => {\n  // debugger\n  const [img, setImg] = useState(undefined)\n  const form = useSelector((state) => state.form)\n  console.log(form)\n  let reader = new FileReader()\n  reader.readAsDataURL(form.image[0])\n  reader.onload = (e) => {\n    setImg(e.target.result)\n    // console.log(e.target.result)\n  }\n\n  var data = {\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: ['#FF6â€°84', '#4BC0C0', '#FFCE56', '#36A2EB'],\n      },\n    ],\n  }\n  Object.keys(res.result).forEach((key) => {\n    data.labels.push(key)\n    data.datasets[0].data.push(res.result[key])\n  })\n  // debugger\n  const type = data.labels[data.datasets[0].data.indexOf(Math.max(...data.datasets[0].data))]\n  return (\n    <div>\n      <CCard>\n        <CCardHeader>\n          <strong> Results </strong>\n        </CCardHeader>\n        <CCardBody>\n          <CCardTitle>Congrats!</CCardTitle>\n          <p className=\"text-medium-emphasis small\">Your image is successfully identified!</p>\n\n          {/* <strong>Uploaded image</strong>\n          <hr /> */}\n          <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around' }}>\n            <CCard\n              style={{ margin: '30px', width: '300px', display: 'inline-flex', border: '0px' }}\n            >\n              <CCardImage\n                style={{\n                  borderTopLeftRadius: '3px',\n                  borderTopRightRadius: '3px',\n                  borderBottomLeftRadius: '3px',\n                  borderBottomRightRadius: '3px',\n                }}\n                orientation=\"bottom\"\n                src={img}\n              />\n              <CCardBody style={{ backgroundcolor: 'grey' }}>\n                <CCardTitle align=\"left\">{form.name}</CCardTitle>\n                <CCardText>\n                  <font align=\"left\">Type:</font>\n                  <font color=\"36A2EB\">\n                    <strong align=\"right\">{type}</strong>\n                  </font>\n                  <br />\n\n                  <font align=\"left\">Private:</font>\n                  <strong>{form.shareSwitch ? 'No' : 'Yes'}</strong>\n                </CCardText>\n              </CCardBody>\n            </CCard>\n            {/* <strong>Result</strong>\n            <hr /> */}\n            <CChartDoughnut style={{ display: 'inline-flex', width: '300px' }} data={data} />\n          </div>\n        </CCardBody>\n      </CCard>\n    </div>\n  )\n}\n\nexport default Result\n","import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CFormSwitch,\n  // CSpinner,\n  CFormSelect,\n  CFormFeedback,\n  CRow,\n} from '@coreui/react'\nimport { useForm } from 'react-hook-form'\nimport axios from 'axios'\nimport Loading from './Loading'\nimport Result from './Result'\nimport { useDispatch } from 'react-redux'\n\nconst Diagnosis = () => {\n  const dispatch = useDispatch()\n  const { register, handleSubmit } = useForm()\n  const [loading, setLoading] = React.useState(false)\n  const [result, setResult] = React.useState(null)\n  const onSubmit = (data) => {\n    // store form data in redux store\n    dispatch({ type: 'set', form: data })\n    let formData = new FormData()\n    setLoading(true)\n    Object.keys(data).forEach((key) => {\n      if (key === 'image') {\n        formData.append(key, data[key][0])\n      } else {\n        formData.append(key, data[key])\n      }\n    })\n    axios\n      .post('/api/predict', formData, {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n        },\n      })\n      .then((res) => {\n        // debugger\n        dispatch({\n          type: 'set',\n          result: res.data,\n        })\n        setResult(res.data)\n        console.log(res.data)\n      })\n  }\n\n  return (\n    <div>\n      {!loading && !result && (\n        <CRow>\n          <CCol xs={12}>\n            <CCard className=\"mb-4\">\n              <CCardHeader>\n                <strong>Start Diagnosis</strong> <small>Upload photo to start diagnosis</small>\n              </CCardHeader>\n              <CCardBody>\n                <CForm onSubmit={handleSubmit(onSubmit)}>\n                  {/* <DocsExample href=\"forms/form-control#file-input\"> */}\n\n                  <CCol className=\"mb-3\" md={6}>\n                    <CFormLabel htmlFor=\"formName\">Name this diagnosis:</CFormLabel>\n                    <CInputGroup className=\"has-validation\">\n                      <CFormInput\n                        {...register('name')}\n                        type=\"text\"\n                        id=\"formName\"\n                        placeholder=\"Input Name\"\n                        required\n                      />\n                      <CFormFeedback invalid>Please choose a username.</CFormFeedback>\n                    </CInputGroup>\n                  </CCol>\n                  <CCol className=\"mb-3\" md={3}>\n                    <CFormLabel htmlFor=\"formType\" required>\n                      Select image type:\n                    </CFormLabel>\n                    <CFormSelect {...register('type')} aria-label=\"Select type:\" id=\"formType\">\n                      <option>Select type</option>\n                      <option value=\"jpeg\">jpeg</option>\n                      <option value=\"png\">png</option>\n                      <option value=\"tiff\">tiff</option>\n                    </CFormSelect>\n                    <CFormFeedback invalid>Please choose a username.</CFormFeedback>\n                  </CCol>\n\n                  <CCol className=\"mb-3\" md={6}>\n                    <CFormLabel htmlFor=\"formFile\">Upload image:</CFormLabel>\n                    <CFormInput {...register('image')} type=\"file\" id=\"formFile\" />\n                  </CCol>\n                  {/* <div className=\"mb-3\">\n                <CFormLabel htmlFor=\"formFileMultiple\">Multiple files input example</CFormLabel>\n                <CFormInput type=\"file\" id=\"formFileMultiple\" multiple />\n              </div> */}\n                  <CCol md={5}>\n                    <CFormSwitch\n                      {...register('shareSwitch')}\n                      label=\"Share Data with us\"\n                      id=\"formSwitch\"\n                    />\n                  </CCol>\n                  <CCol md={7}>\n                    <br />\n                    <CButton type=\"submit\" color=\"primary\" className=\"text-end\">\n                      Submit\n                    </CButton>\n                  </CCol>\n                </CForm>\n                {/* </DocsExample> */}\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      )}\n      {loading && !result && <Loading />}\n      {result && <Result result={result} />}\n    </div>\n  )\n}\n\nexport default Diagnosis\n"],"names":["style","display","justifyContent","alignContent","title","autohide","visible","closeButton","margin","component","size","className","res","useState","undefined","img","setImg","form","useSelector","state","console","log","reader","FileReader","readAsDataURL","image","onload","e","target","result","data","labels","datasets","backgroundColor","Object","keys","forEach","key","push","type","indexOf","Math","max","flexWrap","width","border","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","orientation","src","backgroundcolor","align","name","color","shareSwitch","dispatch","useDispatch","useForm","register","handleSubmit","React","loading","setLoading","setResult","xs","onSubmit","formData","FormData","append","axios","headers","then","md","htmlFor","id","placeholder","required","invalid","value","label"],"sourceRoot":""}